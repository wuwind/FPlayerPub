package com.wuwind.undercover.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GAME".
 */
public class GameDao extends AbstractDao<Game, Long> {

    public static final String TABLENAME = "GAME";

    /**
     * Properties of entity Game.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property WordId = new Property(1, Long.class, "wordId", false, "WORDID");
        public final static Property Count = new Property(2, Integer.class, "count", false, "COUNT");
        public final static Property Normal = new Property(3, Integer.class, "normal", false, "NORMAL");
        public final static Property Undercover = new Property(4, Integer.class, "undercover", false, "UNDERCOVER");
        public final static Property Blank = new Property(5, Integer.class, "blank", false, "BLANK");
        public final static Property Audience = new Property(6, Integer.class, "audience", false, "AUDIENCE");
        public final static Property Sequence = new Property(7, byte[].class, "sequence", false, "SEQUENCE");
        public final static Property Out = new Property(8, byte[].class, "out", false, "OUT");
        public final static Property Finish = new Property(9, Integer.class, "finish", false, "FINISH");
    }


    public GameDao(DaoConfig config) {
        super(config);
    }

    public GameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WORDID\" INTEGER," + // 1: wordId
                "\"COUNT\" INTEGER," + // 2: count
                "\"NORMAL\" INTEGER," + // 3: normal
                "\"UNDERCOVER\" INTEGER," + // 4: undercover
                "\"BLANK\" INTEGER," + // 5: blank
                "\"AUDIENCE\" INTEGER," + // 6: audience
                "\"SEQUENCE\" TEXT," + // 7: sequence
                "\"OUT\" TEXT," + // 7: sequence
                "\"FINISH\" INTEGER);"); // 8: finish
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Game entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long wordId = entity.getWordId();
        if (wordId != null) {
            stmt.bindLong(2, wordId);
        }

        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(3, count);
        }

        Integer normal = entity.getNormal();
        if (normal != null) {
            stmt.bindLong(4, normal);
        }

        Integer undercover = entity.getUndercover();
        if (undercover != null) {
            stmt.bindLong(5, undercover);
        }

        Integer blank = entity.getBlank();
        if (blank != null) {
            stmt.bindLong(6, blank);
        }

        Integer audience = entity.getAudience();
        if (audience != null) {
            stmt.bindLong(7, audience);
        }

        String sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindString(8, sequence);
        }

        String out = entity.getOut();
        if (out != null) {
            stmt.bindString(9, out);
        }

        Integer finish = entity.getFinish();
        if (finish != null) {
            stmt.bindLong(10, finish);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Game entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long wordId = entity.getWordId();
        if (wordId != null) {
            stmt.bindLong(2, wordId);
        }

        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(3, count);
        }

        Integer normal = entity.getNormal();
        if (normal != null) {
            stmt.bindLong(4, normal);
        }

        Integer undercover = entity.getUndercover();
        if (undercover != null) {
            stmt.bindLong(5, undercover);
        }

        Integer blank = entity.getBlank();
        if (blank != null) {
            stmt.bindLong(6, blank);
        }

        Integer audience = entity.getAudience();
        if (audience != null) {
            stmt.bindLong(7, audience);
        }

        String sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindString(8, sequence);
        }
        String out = entity.getOut();
        if (out != null) {
            stmt.bindString(9, out);
        }

        Integer finish = entity.getFinish();
        if (finish != null) {
            stmt.bindLong(10, finish);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Game readEntity(Cursor cursor, int offset) {
        Game entity = new Game( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // wordId
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // count
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // normal
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // undercover
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // blank
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // audience
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sequence
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sequence
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // finish
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Game entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWordId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNormal(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUndercover(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBlank(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAudience(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSequence(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOut(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFinish(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
    }

    @Override
    protected final Long updateKeyAfterInsert(Game entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Game entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Game entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
